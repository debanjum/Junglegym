// Generated by CoffeeScript 1.6.3
(function() {
  var SerialPort, app, ard_data, cleanData, debug, dweet, dweetClient, dweetio, express, fs, http, io, port, readData, red, resetspec, scan, serialport, server, sf, sys;

  SerialPort = require('serialport').SerialPort;

  fs = require('fs');

  express = require('express');

  io = require('socket.io');

  http = require('http');

  sys = require('sys');

  red = require('node-red');

  dweetClient = require('node-dweetio');

  port = '/dev/ttyACM1';

  serialport = null;

  debug = true;

  ard_data = "$";

  scan = "$";

  resetspec = "$";

  dweet = null;

  app = express();

  server = http.createServer(app);

  server.listen(7000);

  io = io.listen(server);

  io.set('log level', 3);

  app.use("/", express["static"](__dirname + '/spectra'));

  app.use(express.cookieParser());

  app.set('view engine', 'jade');

  app.get('/', function(req, res) {
    res.sendfile(__dirname + '/spectra/index.html');
    return req.session.views++;
  });

  app.get('/spectra/stylesheets/screen.css', function(req, res) {
    return res.sendfile(__dirname + '/spectra/stylesheets/screen.css');
  });

  app.get('/spectra/favicon.png', function(req, res) {
    return res.sendfile(__dirname + '/spectra/favicon.png');
  });

  app.get('/spectra/javascripts/snap.svg-min.js', function(req, res) {
    return res.sendfile(__dirname + '/spectra/javascripts/snap.svg-min.js');
  });

  app.get('/spectra/javascripts/jquery.fancybox.pack.js', function(req, res) {
    return res.sendfile(__dirname + '/spectra/javascripts/jquery.fancybox.pack.js');
  });

  app.get('/spectra/images/social/github.png', function(req, res) {
    return res.sendfile(__dirname + '/spectra/images/social/github.png');
  });

  app.get('/spectra/images/social/rss.png', function(req, res) {
    return res.sendfile(__dirname + '/spectra/images/social/rss.png');
  });

  app.get('/spectra/font/fontawesome-webfont.ttf', function(req, res) {
    return res.sendfile(__dirname + '/spectra/font/fontawesome-webfont.ttf');
  });

  app.get('/spectra/atom.xml', function(req, res) {
    return res.sendfile(__dirname + '/spectra/atom.xml');
  });

  app.get('/spectra/images/test.svg', function(req, res) {
    return res.sendfile(__dirname + '/spectra/images/test.svg');
  });

  io.sockets.on('connection', function(socket) {
    socket.on('message', function(msg) {
      if (debug === true) {
        return console.log(msg);
      }
    });
    socket.on('disconnect', function() {
      if (debug === true) {
        return console.log('Disconnected');
      }
    });
    socket.on('initspec', function(startwave, stopwave) {
      ard_data = "#0!" + startwave + stopwave + ".";
      if (debug === true) {
        console.log(startwave, stopwave, ard_data);
      }
      if (sf === true) {
        return serialport.write(ard_data);
      } else {
        return socket.emit('sff');
      }
    });
    socket.on('scanspec', function() {
      var scanspec;
      scanspec = "#1!.";
      if (debug === true) {
        console.log(scanspec);
      }
      if (sf === true) {
        return serialport.write(scanspec);
      } else {
        return socket.emit('sff');
      }
    });
    return socket.on('resetspec', function() {
      resetspec = "#2!.";
      if (debug === true) {
        console.log(resetspec);
      }
      if (sf === true) {
        return serialport.write(resetspec);
      } else {
        return socket.emit('sff');
      }
    });
  });

  cleanData = '';

  readData = '';

  sf = false;

  console.log("Starting...");

  fs.stat(port, function(err, stats) {
    if (err != null) {
      console.log("Couldn't stat " + port);
    }
    console.log("Started.");
    serialport = new SerialPort(port, {
      baudrate: 57600,
      dataBits: 8,
      stopBits: 1,
      parity: 'none',
      flowControl: false
    });
    return serialport.on('open', function() {
      sf = true;
      if (debug === true) {
        console.log('Open');
      }
      serialport.on('data', function(data) {
        readData += data.toString();
        if (debug === true) {
          console.log('Data Recieved : ' + readData);
        }
        if (readData.indexOf('A') >= 0 && readData.indexOf('B') >= 0) {
          cleanData = readData.substring(readData.indexOf('A') + 1, readData.indexOf('B'));
          readData = '';
          io.sockets.emit('data', cleanData);
        }
        if (debug === true) {
          return console.log('Message : ' + cleanData);
        }
      });
      return cleanData = '';
    });
  });

  dweetio = new dweetClient;

  dweetio.listen_for("d2dweath", function(dweet) {
    return socket.emit('hour', dweet.content);
  });

  console.log(dweet.content);

}).call(this);
